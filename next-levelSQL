
https://dev.to/louaiboumediene/mastering-sql-comprehensive-guide-to-structured-query-language-4gh

BAsic SQL Queries
=================

--- Select all columns FROM a table;
SELECT * FROM Table;

--- Selecting specific columns
SELECT first, last FROM Table;

---  Using DISTINCT to get unique values
SELECT DISTINCT departmentID FROM employees;

--- Using WHERE to filter results
SELECT * FROM employees WHERE departmentID = 10;

--- Using LIMIT to limit the number of results
SELECT * FROM employees LIMIT 5;

--- Using OFFSET to skip certain rows
SELECT * FROM employees OFFSET 5;


Filtering Data
==============

-- Using comparison operators
SELECT * FROM employees WHERE salary > 50000;

-- Using logical operators
SELECT * FROM employees WHERE departmentID = 10 AND salary > 50000;

-- Using IN and NOT IN
SELECT * FROM employees WHERE departmentID in (10, 20):

-- Using BETWEEN
SELECT * FROM employees WHERE salary BETWEEN 40000 AND 60000;

-- Using LIKE for pattern matching
SELECT * FROM employees WHERE last_name LIKE 'S%';


Sorting Data
============

-- Sorting data in ascending order
SELECT * FROM employees ORDER BY salary;

-- Sorting data in descending order
SELECT * FROM employees ORDER BY salary DESC;

-- Sorting by multiple columns
SELECT * FROM employees ORDER BY departmentID, salary DESC;


Aggregate Functions
===================
Perform calculations on a set of values and return a single value.

-- Counting the number of rows
SELECT COUNT(*) FROM employees;

-- Calculating total salary
SELECT SUM (salary) FROM employees;

-- Finding average salary
SELECT AVG (salary) FROM employees;

-- Finding minimum salary
SELECT MIN (salary) FROM employees;

-- Finding maximum salary
SELECT MAX (salary) FROM employees;


Grouping Data
=============
Group rows that have the same values in specified columns using the GROUP BY clause, often used in conjunction with aggregate functions.

-- Grouping data by department
SELECT departmentID, COUNT(*) FROM employees GROUP BY departmentID;

-- Using HAVING to filter grouped data
SELECT departmentID, COUNT(*) FROM employees GROUP BY departmentID
HAVING COUNT(*) > 5;

Joins
=====

-- Inner Join
SELECT * FROM employees JOIN departments on employees.departmentID = departments.departmentID;

-- Left Join
SELECT * FROM employees LEFT JOIN departments on employees.departmentID = departments.departmentID;

-- Right Join
SELECT * FROM employees RIGHT JOIN departments on employees.departmentID = departments.departmentID;

-- Full Outer Join
SELECT * FROM employees FULL OUTER JOIN departments on employees.departmentID = departments.departmentID;


Subqueries
==========
Nested queries within another query.
Used to retriev data that depends on the result of another query.

-- Subquery example
SELECT * FROM employees WHERE departmentID IN (SELECT departmentID
FROM departments WHERE locationID = 1700);

-- Correlated subquery example
SELECT * FROM employees e WHERE salary > (SELECT AVG(salary) FROM
employees WHERE departmentID = e.departmentID);


Views
=====
Virtual tables generated from the result of a query.
They provide a way to simplify complex queries and restrict access
to certain data.

-- Creating a view
CREATE VIEW high_paid_employees AS SELECT * FROM employees WHERE
salary > 80000;

-- Updating a view
CREATE OR REPLACE VIEW high_paid_employees AS SELECT * FROM
employees WHERE salary > 90000;

-- Dropping a view
DROP VIEW IF EXISTS high_paid_employees;
