# File: ~/Git/Sql/Notes/commands

    https://www.sqlitetutorial.net/sqlite-commands/

    $ sqlite3  %Connects to a transient in-memory database.%

    sqlite3> .open data.db
    or..
    $ sqlite3 data.db
    
    sqlite3> .help  --> listing of all dot commands
    sqlite3> .databases  %show all databases currently connected%
    sqlite3> ATTACH DATABASE  %adds DATABASE to connections%
    sqlite3> .exit ?CODE?  % }  both the
    sqlite3> .quit         % }   same?
    sqlite3> .tables
    sqlite3> .table '%es'  % return table ends with 'es'
    sqlite3> .table 'es%'  % return table starts with 'es'
            % don't need the quotes!
    sqlite3> .schema   % all tables' schema returned
    sqlite3> .schema TABLE
    sqlite3> .fullschema  % includes sqlite_stat tables: advanced
    sqlite3> .indexes Moorings
    sqlite3> .indexes %es
    sqlite3> .output FILENAME  % redirect to FILENAME
    sqlite3> .output  % no parameter redirect back to stdout
    sqlite3> .once FILENAME  % redirect to FILENAME only next cmd
    sqlite3> .read FILENAME  % reads and execute query in FILENAME
also: see direct2csv file

COMMENTS
========
/* .... */
or anything from "--" to end of line.


======================================================

CREATE DATABASE PetHotel;  # not in sqlite!
$ sqlite3 sql.db

ATTACH DATABASE 'PetHotel.db' AS Pets;  # creates prn

CREATE TABLE PetTypes
(
    PetTypeId   int NOT NULL PRIMARY KEY,  # primary key constraint
    PetType     varchar(60) NOT NULL
);

Constraints can be added later with an ALTER TABLE statement.



SQLite requires an index to enforce the PRIMARY KEY constraint --
without an index, enforcing the constraint would slow dramatically
as the table grows in size. Constraints and indexes are not
identical, but I don't know of any relational database that does
not automatically create an index to enforce primary keys. So yes,
this is normal behavior for any relational database.

If the purpose of creating an index is to optimize searches where
you have an indexable search term that involves the first column
in the index then there's no reason to create an additional index
on the column(s) -- SQLite will use the automatically created one.

If your searches will involve the second column in the index without
including an indexable term for the first column you will need to
create your index. Neither SQLite (nor any other relational database
I know of) can use composite indexes to optimize filtering when the
head columns of the index are not specified in the search.

SELECT FROM Table
    GROUP BY
    ORDER BY
INSERT INTO Table (...) VALUES (...);
UPDATE Table SET ..=.., .... WHERE ....
DELETE FROM Table WHERE ..=..  --use SELECT first to be sure!

Clauses
=======
WHERE (always after FROM but before ORDER BY)
ORDER BY fieldName ASC/DESC
LIMIT xx

Operators    ('BETWEEN' operator is inclusive)
=========    ('LIKE': use % wild card)
Comparison  Logical     Arithmetic
----------  -------     ----------
=, >, <,    BETWEEN    +, -, /, *, %
>=, <=, <>  IN, LIKE    
            AND, OR

STATEMENT
=========
CASE  --p84



Do we want to exclude any data, filter or omit any range or time
period???
Consice statement: what does the query do???

Best to separate queries into Clauses:
    Each Clause begins with a Key Word and may
    include additional parameters and operators.

ALTER TABLE table-name
>RENAME TO new-table-name >*
>RENAME COLUMN column-name TO new-column-name >*
>ADD COLUMN column-def >*
ALTER Receipts ADD COLUMN name INTEGER DEFAULT = 0;
>DROP COLUMN column-name >*

column-def:
    column-name [type-name] [column-constraint..] >*
column-constraint:
    DEFAULT ''
## See https://www.sqlite.org/lang_altertable.html

INSERT INTO Table
(<field names>)
VALUES
(<values>);

/* if no search condition, deletes all rows in the table!!
DELETE FROM table
WHERE search_condition;

https://www.sqlitetutorial.net/sqlite-update/
UPDATE table
SET column_1 = new_value_1,
    column_2 = new_value_2,
    .....
WHERE
    search_condition;

ORDER BY column_or_expression  --#
LIMIT row_count OFFSET offset;  --#
# Notice that you need to build SQLite with
# SQLITE_ENABLE_UPDATE_DELETE_LIMIT option in
# order to perform UPDATE statement with optional
# ORDER BY and LIMIT clauses.


Walter Shields  SQL Quikck Start Guide

Synonyms
========
Records,  Row,  Tuple
Field,  Column,  Attribute
Table,  Relation,  Base Relvar

The following are both statements and queries:
SELECT fields FROM table ORDER BY field;
SELECT fields FROM table LIMIT n;

Queries can contain >1 clauses
each beginning with a key word:


JOIN
====
INNER JOIN = JOIN
    INNER JOIN is the default when you use the word JOIN.
OUTER JOIN can be LEFT or RIGHT and "OUTER" is optional.
    i.e. LEFT JOIN & LEFT OUTER JOIN are synonyms.
CROSS JOIN.

OR

    For an INNER JOIN, the syntax is:

    SELECT ...
    FROM TableA
    [INNER] JOIN TableB

    (In other words, the INNER keyword is optional--results are the same with or without it.)

The first table in a JOIN is called the LEFT TABLE and the second table in a JOIN is called the RIGHT JOIN.


https://www.sqlservertutorial.org/sql-server-joins/
SQL server supports 5 types of JOINS. They are:

    INNER JOIN (also referred to as JOIN)
    LEFT OUTER JOIN (also referred to as LEFT JOIN)
    RIGHT OUTER JOIN (also referred to as RIGHT JOIN)
    FULL OUTER JOIN (also referred to as FULL JOIN)
    CROSS JOIN

1)  INNER JOIN
An INNER JOIN is a JOIN between two tables where the JOIN result
set consists of rows from the left table which match rows from
the right table (i.e. returns the common rows from both tables).

2) LEFT OUTER JOIN (or LEFT JOIN)
A LEFT OUTER JOIN between 2 tables is a JOIN where the resultset
consists of all rows from the left table including unique rows
(which do not match any row in the right table) and matching rows
(common rows of both tables) but include only matching rows from
the right table. The non-matching rows of the right table are
represented by NULL values.

3) RIGHT OUTER JOIN (or RIGHT JOIN)
A RIGHT OUTER JOIN between 2 tables is a JOIN where the resultset
consists of all rows from the right table including unique rows
(which do not match any row in the left table) and matching rows
(common rows of both tables) but includes only matching rows from
the left table. The non-matching rows of the left table are
represented by NULL values. So, it is the exact reverse of a
LEFT JOIN.

4)  FULL OUTER JOIN (or FULL JOIN)
A FULL OUTER JOIN between 2 tables is a JOIN where the resultset
consists of the entire set of rows from both the left and right
table. Rows of the left table which do not have matching
counterpart in the right are represented by NULL and rows of
right table which do have matching counterpart in the left are
represented by NULL.

5) CROSS JOIN
A CROSS JOIN is a different kind of join which does not require
any relation between the participating tables and operates without
having to join the tables on a common column. The purpose of a
CROSS JOIN is not to combine intersecting data or unique data or
entire set of data from both tables but rather to combine the
datasets of the participating tables exhaustively generating the
complete list of possible combinations.
