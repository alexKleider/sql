
    https://www.sqlitetutorial.net/sqlite-commands/

    $ sqlite3  %Connects to a transient in-memory database.%

    sqlite3> .open data.db
    or..
    $ sqlite3 data.db
    
    sqlite3> .help  --> listing of all dot commands
    sqlite3> .databases  %show all databases currently connected%
    sqlite3> ATTACH DATABASE  %adds DATABASE to connections%
    sqlite3> .exit ?CODE?  % }  both the
    sqlite3> .quit         % }   same?
    sqlite3> .tables
    sqlite3> .table '%es'  % return table ends with 'es'
    sqlite3> .table 'es%'  % return table starts with 'es'
            % don't need the quotes!
    sqlite3> .schema   % all tables' schema returned
    sqlite3> .schema TABLE
    sqlite3> .fullschema  % includes sqlite_stat tables: advanced
    sqlite3> .indexes Moorings
    sqlite3> .indexes %es
    sqlite3> .output FILENAME  % redirect to FILENAME
    sqlite3> .output  % no parameter redirect back to stdout
    sqlite3> .once FILENAME  % redirect to FILENAME only next cmd
    sqlite3> .read FILENAME  % reads and execute query in FILENAME

COMMENTS
========
/* .... */
or anything from "--" to end of line.


======================================================

CREATE DATABASE PetHotel;  # not in sqlite!
$ sqlite3 sql.db

ATTACH DATABASE 'PetHotel.db' AS Pets;  # creates prn

CREATE TABLE PetTypes
(
    PetTypeId   int NOT NULL PRIMARY KEY,  # primary key constraint
    PetType     varchar(60) NOT NULL
);

Constraints can be added later with an ALTER TABLE statement.



SQLite requires an index to enforce the PRIMARY KEY constraint --
without an index, enforcing the constraint would slow dramatically
as the table grows in size. Constraints and indexes are not
identical, but I don't know of any relational database that does
not automatically create an index to enforce primary keys. So yes,
this is normal behavior for any relational database.

If the purpose of creating an index is to optimize searches where
you have an indexable search term that involves the first column
in the index then there's no reason to create an additional index
on the column(s) -- SQLite will use the automatically created one.

If your searches will involve the second column in the index without
including an indexable term for the first column you will need to
create your index. Neither SQLite (nor any other relational database
I know of) can use composite indexes to optimize filtering when the
head columns of the index are not specified in the search.

SELECT FROM Table
    GROUP BY
    ORDER BY
INSERT INTO Table ... VALUES ...
UPDATE Table SET ..=.., .... WHERE ....
DELETE FROM Table WHERE ..=..  --use SELECT first to be sure!

Clauses
=======
WHERE (always after FROM but before ORDER BY)
ORDER BY fieldName ASC/DESC
LIMIT xx

Operators    ('BETWEEN' operator is inclusive)
=========    ('LIKE': use % wild card)
Comparison  Logical     Arithmetic
----------  -------     ----------
=, >, <,    BETWEEN    +, -, /, *, %
>=, <=, <>  IN, LIKE    
            AND, OR

STATEMENT
=========
CASE  --p84



Do we want to exclude any data, filter or omit any range or time
period???
Consice statement: what does the query do???

Best to separate queries into Clauses:
    Each Clause begins with a Key Word and may
    include additional parameters and operators.

ALTER TABLE table-name
>RENAME TO new-table-name >*
>RENAME COLUMN column-name TO new-column-name >*
>ADD COLUMN column-def >*
ALTER Receipts ADD COLUMN name INTEGER DEFAULT = 0;
>DROP COLUMN column-name >*

column-def:
    column-name [type-name] [column-constraint..] >*
column-constraint:
    DEFAULT ''
## See https://www.sqlite.org/lang_altertable.html

INSERT INTO Table
(<field names>)
VALUES
(<values>);

https://www.sqlitetutorial.net/sqlite-update/
UPDATE table
SET column_1 = new_value_1,
    column_2 = new_value_2,
    .....
WHERE
    search_condition;

ORDER column_or_expression  --#
LIMIT row_count OFFSET offset;  --#
# Notice that you need to build SQLite with
# SQLITE_ENABLE_UPDATE_DELETE_LIMIT option in
# order to perform UPDATE statement with optional
# ORDER BY and LIMIT clauses.
