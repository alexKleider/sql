# https://docs.sqlalchemy.org/en/20/tutorial/dbapi_transactions.html
#!/usr/bin/env python3

# File: alchemy.py

import sqlalchemy

# print(sqlalchemy.__version__)

engine = sqlalchemy.create_engine(
        "sqlite+pysqlite:////home/alex/Git/Sql/Secret/club.db"
#       , echo=True
        )
with engine.connect() as con:
    result = con.execute(sqlalchemy.text(  # 'textual'
                                           #  sql statement
        "SELECT statusID, key, text FROM Stati"))
    for row in result:
        print(f'{row.statusID:>3}: {row.key:<12} {row.text}')
#   con.commit()  # needed if changing (vs querying) data
#   invoked inside the engine.connect() as con block.

# "commit as you go"
>>> with engine.connect() as conn:
...     conn.execute(text("CREATE TABLE some_table (x int, y int)"))
...     conn.execute(
...         text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
...         [{"x": 1, "y": 1}, {"x": 2, "y": 4}],
...     )
...     conn.commit()

Two styles: commit as you go (as above)
and: begin once (as bellow:)

# "begin once"
>>> with engine.begin() as conn:
...     conn.execute(
...         text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
...         [{"x": 6, "y": 8}, {"x": 9, "y": 10}],
...     )

“Begin once” style is often preferred as it is more succinct and
indicates the intention of the entire block up front. However,
within this tutorial we will normally use “commit as you go” style
as it is more flexible for demonstration purposes.

Above, the “SELECT” string we executed selected all rows from our
table. The object returned is called Result and represents an
iterable object of result rows.

Result has lots of methods for fetching and transforming rows,
such as the Result.all() method illustrated previously, which
returns a list of all Row objects. It also implements the Python
iterator interface so that we can iterate over the collection of
Row objects directly.

The Row objects themselves are intended to act like Python named
tuples. Below we illustrate a variety of ways to access rows.

    Tuple Assignment - This is the most Python-idiomatic style,
    which is to assign variables to each row positionally as they
    are received:

    result = conn.execute(text("select x, y from some_table"))

    for x, y in result:
        ...

Integer Index - Tuples are Python sequences, so regular integer
access is available too:

result = conn.execute(text("select x, y from some_table"))

for row in result:
    x = row[0]

Attribute Name - As these are Python named tuples, the tuples have
dynamic attribute names matching the names of each column. These
names are normally the names that the SQL statement assigns to the
columns in each row. While they are usually fairly predictable and
can also be controlled by labels, in less defined cases they may be
subject to database-specific behaviors:

result = conn.execute(text("select x, y from some_table"))

for row in result:
    y = row.y

    # illustrate use with Python f-strings
    print(f"Row: {row.x} {y}")

Mapping Access - To receive rows as Python mapping objects, which is
essentially a read-only version of Python’s interface to the common
dict object, the Result may be transformed into a MappingResult object
using the Result.mappings() modifier; this is a result object that
yields dictionary-like RowMapping objects rather than Row objects:

result = conn.execute(text("select x, y from some_table"))

for dict_row in result.mappings():
    x = dict_row["x"]
    y = dict_row["y"]

Sending Parameters
SQL statements are usually accompanied by data that is to be passed
with the statement itself, as we saw in the INSERT example previously.
The Connection.execute() method therefore also accepts parameters,
which are referred towards as bound parameters. A rudimentary example
might be if we wanted to limit our SELECT statement only to rows that
meet a certain criteria, such as rows where the “y” value were greater
than a certain value that is passed in to a function.

In order to achieve this such that the SQL statement can remain fixed
and that the driver can properly sanitize the value, we add a WHERE
criteria to our statement that names a new parameter called “y”; the
text() construct accepts these using a colon format “:y”. The actual
value for “:y” is then passed as the second argument to
Connection.execute() in the form of a dictionary:

>>> with engine.connect() as conn:
...     result = conn.execute(text(
...         "SELECT x, y FROM some_table WHERE y > :y"), {"y": 2})
...     for row in result:
...         print(f"x: {row.x}  y: {row.y}")
BEGIN (implicit)
SELECT x, y FROM some_table WHERE y > ?
[...] (2,)
x: 2  y: 4
x: 6  y: 8
x: 9  y: 10
ROLLBACK

In the logged SQL output, we can see that the bound parameter :y
was converted into a question mark when it was sent to the SQLite
database. This is because the SQLite database driver uses a format
called “qmark parameter style”, which is one of six different
formats allowed by the DBAPI specification. SQLAlchemy abstracts
these formats into just one, which is the “named” format using a
colon.


Sending Multiple Parameters

In the example at Committing Changes, we executed an INSERT statement
where it appeared that we were able to INSERT multiple rows into the
database at once. For DML statements such as “INSERT”, “UPDATE” and
"DELETE", we can send multiple parameter sets to the
Connection.execute() method by passing a list of dictionaries instead
of a single dictionary, which indicates that the single SQL statement
should be invoked multiple times, once for each parameter set. This
style of execution is known as executemany:

>>> with engine.connect() as conn:
...     conn.execute(
...         text("INSERT INTO some_table (x, y) VALUES (:x, :y)"),
...         [{"x": 11, "y": 12}, {"x": 13, "y": 14}],
...     )
...     conn.commit()
BEGIN (implicit)
INSERT INTO some_table (x, y) VALUES (?, ?)
[...] [(11, 12), (13, 14)]
<sqlalchemy.engine.cursor.CursorResult object at 0x...>
COMMIT

The above operation is equivalent to running the given INSERT
statement once for each parameter set, except that the operation
will be optimized for better performance across many rows.

A key behavioral difference between “execute” and “executemany”
is that the latter doesn’t support returning of result rows, even
if the statement includes the RETURNING clause. The one exception
to this is when using a Core insert() construct, introduced later
in this tutorial at Using INSERT Statements, which also indicates
RETURNING using the Insert.returning() method. In that case,
SQLAlchemy makes use of special logic to reorganize the INSERT
statement so that it can be invoked for many rows while still
supporting RETURNING.



