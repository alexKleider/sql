# File: ~/Git/Sql/Notes/notes.txt

Natural-SQL Language Bridge:
1. what data base?
2. what table?
3. what fields?
4. exclude, filter or omit any range or time period?
5. what does the query do?

/*
CREATED BY: 
CREATED ON:
DESCRIPTION: -- item 5 above.
*/

Coding Convention
=================
* : all available fields; best practice to avoid!
Indents & Spacing: Separate query into clauses.
Clause: a subsection of an SQL statement beginning with a keyword.
    ... it may include additional parameters and operators.
    ORDER BY clause:  -- without it: as ordered in table
        firstname DESC
        lastname ASC --the default
    LIMIT 10
Operators: Comparison, Logical, Arithmetic
    SELECT Total + 10
    WHERE Total = 1.98
    WHERE Total BETWEEN 1.98 AND 5.00
    WHERE Total IN (1.98, 3.96)
    WHERE BillingCity LIKE 'T%' -- '%T%: T anywhere in word.
    --  % == 'whatever else'
    DATE function p78
    WHERE BillingCity LIKE 'p%' OR BillingCity LIKE 'd%'
    WHERE Total > 1.98 AND  --parentheses to specify precidence
            (BillingCity LIKE 'p%' OR BillingCity LIKE 'd%')
    CASE statement p94

https://docs.python.org/3/library/sqlite3.html#tutorial

sqlite3 Secret/club.db
SQLite version 3.34.1 2021-01-20 14:10:07
Enter ".help" for usage hints.
sqlite> select name from sqlite_master;

or
import sqlite3
con = sqlite3.connect(<db-file>)
cur = con.cursor()
cur.execute("CREATE TA...  # if haven't connected to a db already
res = cur.execute("SELECT name FROM sqlite_master")
res.fetchone()


AVOID string formatting; USE place holders:
https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders
use the DB-API’s parameter substitution
To insert a variable into a query string, use a placeholder in the
string, and substitute the actual values into the query by providing
them as a tuple or dict of values to the second argument of the
cursor’s execute() method. (...or executemany() method.)
Placeholders are of two types:
qmark: question marks, number matching tuple length
named: key words for a dict (extra keys in dict are OK)


https://pypapers.substack.com/p/how-to-work-with-a-database-using
https://docs.python.org/3/library/sqlite3.html

import sqlite3
con = sqlite3.connect('library.db')
# Must have a table with which to work:
# CREATE TABLE table_name  -- error if columb exists
# (column_one TEXT, column_2 TEXT, column_three TEXT)
# Use convention of KEYWORDS IN UPPER-case,
# identifiers in Mixed- or lower-case.
cur = con.cursor()
cur.execute("""CREATE TABLE table_name
    (books TEXT, author TEXT, release_date TEXT,
    publisher TEXT, book_type TEXT)
    """)

https://dev.to/louaiboumediene/mastering-relational-database-design-a-comprehensive-guide-3jh8
Data integrity refers to the accuracy, consistency, and
reliability of data stored in a database:
1. Entity Integrity:
Ensures each row in a table is uniquely identifiable by a
primary key, and the primary key cannot have null values.
2. Referential Integrity: Maintains relationships between
tables by ensuring foreign key values in one table match
the primary key values in another table.
3. Domain Integrity: Enforces valid entries for a given
column by restricting the data type, format, and range
of values that can be stored.

Database Terms
* Table: A collection of related data organized in rows and columns.
* Row: A single instance or entry in a table (also known as a record or tuple).
* Column: A specific characteristic or property of the data in a table (also
known as a field or attribute).
* Primary Key: A column or combination of columns that uniquely identifies
each row in a table.
* Foreign Key: A column or combination of columns that references the primary
key of another table, establishing a relationship between the two tables.
* Join: An operation that combines rows from two or more tables based on a
related column.
* Index: A data structure that improves the performance of data retrieval
operations by creating a sorted representation of the data in a table.
* View: A virtual table that is dynamically generated from one or more
underlying tables.
* Stored Procedure: A pre-compiled collection of SQL statements that can be
executed as a single unit.
* Trigger: A special type of stored procedure that is automatically executed
when a specific event occurs in a table, such as an INSERT, UPDATE, or DELETE
statement.

Atomic Values
Store only the smallest pieces of information that cannot be further divided.
e.g. first_name and last_name vs name


