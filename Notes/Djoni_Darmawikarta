
Learning SQL in SQLite for Beginners
by Djoni Darmawikarta
Copyright Â© 2022 by the author.

Chapter 1
=========
Creating Tables

CREATE TABLE tablename
  (column_1 data_type_1,
   column_2 data_type_2,
   ...
  PRIMARY KEY (coulumns)
  );

INSERT INTO table
  (column_1,
   column_2,
   ...)
  VALUES (value_1,
    value_2,
    ...)
  );

SELECT * FROM table;

INSERT INTO table (column_1, column_2, ...)
VALUES
  (value1a, value2a, ...),
  (value1b, value2b, ...),
   ...
  (value1z, value2z, ...);

NULL: absence of a data!

UPDATE table_name
SET column_1 = new_value_1 [,
    column_2 = new_value_2,
    ...]
    [WHERE condition];
-- if no WHERE clause _all_ rows are updated!!!
-- if no rows match the WHERE clause, nothing changes
eg UPDATE product SET price = price - (price*0.05);

DELETE FROM table
  [WHERE condition];
-- without WHERE clause, all rows are deleted!!


Chapter 2:  Queries
==========  =======
SELECT column_names FROM table_name
    [WHERE condition];
-- list <column_names> in order desired for display
Simplest FROM:  (asterisk (*) means all columns)
SELECT * FROM table;
SELECT column_names FROM table_name [WHERE
        condition];
CONDITIONS
----------
Conparison Operators:
    =, <, >, <=, >=, !=
"p_name != "Nail" is called a predicate.
Predicates can be combined using AND & OR forming
a compound condition. (AND has higher precidence,
use parentheses to change precedence)
NOTE: applying any comparison to NULL => false.
Use NOT to negate a condition.
BETWEEN Operator:  (values are inclusive)
... WHERE column BETWEEN(lowest_value, highest_value);
IN Operator:
... WHERE column IN(value1, value2,...);
LIKE Operator:
... WHERE column LIKE'...wildcard_character...';
--wildcard can be %: any number of characters
               or _: single occurrence of any character.
--can be 'escaped': \% or \_ if need to include the char.
NOT operator: can be combined with BETWEEN, IN or LIKE.

NULL an SQL reserved word
==== --------------------
--absence of data
--can specify at table creation time if value can be NULL
--applying any comparison operator to NULL => NULL
--can only use IS NULL or IS NOT NULL for a valid result

Chapter 3: Query Output
=======================
a.Column Aliases:  (use sq brackets for multiword alias)
----------------
SELECT column_1 AS alias1, column_2 AS [Alias Two],...
FROM table;

b.Expressions:   p47
-------------
-an output column can be an expression which can include:
    columns, literal values, arithmetic or string operators
    or functions: eg..
SELECT p_name,
    'p_name in Uppercase: ' || UPPER(p_name) AS
    [PRODUCT NAME], --product name in uppercases
    price, (price * 100) AS NORMALIZED_PRICE, -- price of 100
    date('now') AS [CURRENT_DATE], --current date as a string
    ....  (see "Built-in Functions" Chapter 9)
SQLite does not support the CONCAT() function:
--use the concatenate operator (||) to join strings.

c.Orderering Output Rows:
-------------------------
  i.ORDER BY column(s) +/- DESC (after any of the columns)
    +/- preceding WHERE clause
 ii.GROUP BY clause
iii.Use of UNION and other set operators

LIMIT [offset,] row_count;  -- LIMIT 0, 3 == LIMIT 3
-- any WHERE clause must precede any of the above.
-- ORDER BY must precede LIMIT
The DISTINCT Keyword: SELECT DISTINCT ...

Use of Aggregate Functions
SELECT MAX(price), MIN(price), AVG(price),
    COUNT(price), COUNT(*) FROM product;

The CASE expression: simple and searched  p64
Simple CASE:
    pass
Searched CASE:
    pass

Chapter 4: Grouping
===================


Chapter 5: Joins   p78
================


Chapter 6: Compound Queries  p91
===========================

Chapter 7: Subqueries    p99
=====================



