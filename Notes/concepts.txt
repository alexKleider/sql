# File: concepts.txt

http://www.alan-g.me.uk/l2p2/
https://www.sqlite.org

apt install sqlite3

The basic principle of a relational database is very straightforward.
It's simply a set of tables where a cell in one table can refer to a
row in another table. Columns are known as fields and rows as records.

Data Definition Language (DDL): [CREATE, DROP, ..  {Not case sensitive}
Data Manipulation Language (DML): [INSERT, SELECT, UPDATE, DELETE etc]
{However, SQL programmers often follow a style whereby SQL
keywords are entered as upper case and variables and table or
field names are entered in lowercase.}
{designed to express the required outcome rather than instruct the
computer how to achieve it}

$ sqlite3 employee.db

(sql) alex@t460:~/Git/SQL$ sqlite3 employee.db
SQLite version 3.34.1 2021-01-20 14:10:07
Enter ".help" for usage hints.
sqlite> CREATE TABLE Employee
   ...> (EmpID,Name,HireDate,Grade,ManagerID);
sqlite> .tables
Employee
sqlite> CREATE TABLE Salary
   ...> (SalaryID, Grade,Amount);
sqlite> .tables
Employee  Salary
sqlite>

> .help >> listing of 'dot commands' of which '.tables' is one.
    .quit
    .read <a file of sql commands>
    .tables

Start the interpreter:
-simply a case of calling it with a filename as an argument.
If the database exists it will be opened,
if it doesn't it will be created. Thus:
(sql) alex@t460:~/Git/SQL$ sqlite3 employee.db

Table creation takes the following (simplified) form:
CREATE TABLE tablename (fieldName, fieldName,....);
More advanced creation options:
Most databases (but not sqlite) require you to specify
the type along with the name.
Possible to specify constraints as to the values:
for example NOT NULL means the value is mandatory (must be filled in)
(Usually we would make the Primary Key field NOT NULL and UNIQUE.)
Can also specify which field will be the PRIMARY KEY.

Inserting data: the INSERT statement:
INSERT INTO tablename ( column1, column2... ) VALUES ( value1, value2... );
An alternate (more advanced) form of INSERT uses a
query to select data from elsewhere in the database.

Data extraction:
The SELECT command is the very heart of SQL and
has the most complex structure. Starting with the most basic form:
SELECT column1, column2... FROM table1,table2...;
So to select the names of all employees we could use:
sqlite> SELECT Name FROM Employee;
>>> a list of all of the names in the Employee table.
To refine our search add a WHERE clause:
SELECT col1,col2... FROM table1,table2... WHERE condition;
The condition is an arbitrarily complex boolean expression 
which can include nested SELECT statements within it.
sqlite> SELECT Name
   ...> FROM Employee
   ...> WHERE Employee.Grade = 'Labourer';
Extend the condition using boolean operators such as AND, OR, NOT etc.
Note the dot notation is unnecessary here only because
no other table has the field named Grade.
sqlite> SELECT Name, Amount FROM Employee, Salary
   ...> WHERE  Employee.Grade = Salary.Grade
   ...> AND    Salary.Amount > '50000';
The first part of the WHERE clause links the two tables together
by ensuring that the common fields are equal,
this is known as a join in SQL.
https://www.guru99.com/sqlite-join.html
We can use the ORDER BY clause of the SELECT statement:
SELECT columns FROM tables WHERE expression ORDER BY columns;
Notice that the final ORDER BY clause can take multiple columns,
this enables us to have primary, secondary, tertiary and so on sort orders.
sqlite> SELECT Name FROM Employee
   ...> ORDER BY HireDate;
Note: WHERE clause (if used) must preceed the ORDER BY clause.

Changing Data: UPDATE, DELETE FROM, 
Can alter the contents of a single record, or a set of records or
can delete records or even a whole table.
Changing the content of an existing record is the more common case
and we do that using the UPDATE SQL command.
UPDATE tablename SET column = value WHERE condition;
We can change the salary of a Foreman to $70,000:
sqlite> UPDATE Salary
   ...> SET Amount ='70000'
   ...> WHERE Grade = 'Foreman';
So far, using only string types; best to store salary as a numeric.


To delete a row, or set of rows use the SQL DELETE FROM command:
DELETE FROM Tablename WHERE condition
sqlite> DELETE FROM Employee WHERE Name = 'Anne Jones';
If more than one row matches our condition then
all of the matching rows will be deleted.

To delete an entire table and its contents use the SQL DROP command.
Destructive commands e.g DELETE & DROP: use with extreme caution!
Best check the WHERE clause: use a SELECT statement first!

Linking Data Across Tables
==========================

Data Constraints

The links between tables represent the relationships between data entities.
These 'relationships' give a Relational Database (such as SQLite) its name.
The database maintains not only the raw data about the entities
but also information about the relationships.
This information is stored in the form of database constraints
which act as rules dictating what kind of data can be stored 
as well as the valid set of values. These constraints are applied
when defining the database structure using the CREATE statement.
Expanded definition:
CREATE TABLE Tablename (
ColumnName Type Constraint,
ColumnName Type Constraint,
...);
And the most common constraints are:
    NOT NULL
    PRIMARY KEY [AUTOINCREMENT]
    UNIQUE
    DEFAULT value

NOT NULL: the value must exist and not be NULL!
a NULL value is simply one that has no specified value.
PRIMARY KEY: use this column as the main key for lookups
AUTOINCREMENT: is implied from a type/constraint
combination of INTEGER PRIMARY KEY. (A not so obvious quirk
of the SQLite documentation [http://www.sqlite.org/faq.html]
UNIQUE: the value must be unique within the column.
... often used for non INTEGER type PRIMARY KEY columns.
DEFAULT is always accompanied by a value which will be inserted
if the user does not explicitly provide one.
The effect of this is that columns with a DEFAULT constraint are in
practice very rarely NULL, to create a NULL value you would need to
explicitly set NULL as the value.
Example showing the use of DEFAULT:
sqlite> CREATE TABLE test
   ...> (id Integer PRIMARY KEY,
   ...> Name NOT NULL,
   ...> Value Integer DEFAULT 42);
sqlite> INSERT INTO test (Name, Value) VALUES ('Alan',24);
sqlite> INSERT INTO test (Name) VALUES ('Heather');
sqlite> INSERT INTO test (Name,Value) VALUES ('Linda', NULL);
sqlite> SELECT * FROM test;
1|Alan|24
2|Heather|42
3|Linda|
sqlite>

Beware of use of * when modifying data! Also:
should not be used in production programs because any change in
the data structure could change the data results and break any
code that relies on the specific number, or order, of fields
retrieved.
There are also constraints that can be applied to the table itself
(not discussed in detail.)

Column Type Constraints: TEXT, INTEGER, REAL, NUMERIC, BLOB, NULL
UMERIC allows the storage of floating-point numbers as well as integers.
BLOB is for storing binary data such as images or other non-textual
documents. (It is, however, often better to store such items as separate
files and only hold a reference to them in the database.)
NULL is not really a type, indicates you don't need to specify a type.
Most databases come with a much wider set of types including, crucially,
a DATE type, however as we are about to see, SQLite has a somewhat
unconventional approach to types which renders such niceties less relevant.
Most databases strictly apply the types specified. However, SQLite employs
a more dynamic scheme, where the type specified is more like a hint, and
any type of data can be stored in the table. When data of a different type
is loaded into a field then SQLite will use the declared type to try and
convert the data, but if it cannot be converted it will be stored in its
original form. Thus if a field is declared as INTEGER but the TEXT value
'123' is passed in, SQLite will convert the string '123' to the number 123.
But if the TEXT value 'Freddy' is passed in the conversion will fail so
SQLite will simply store the string 'Freddy' in the field! This can cause
some strange behaviour if you are not aware of this foible. Most databases
treat the type declaration as a strict constraint and will fail if an
illegal value is passed.

Extracting Data
===============
SELECT column1, column2... FROM table1, table2...; 
sqlite> SELECT Name
   ...> FROM Employee
   ...> WHERE Employee.Grade = 'Labourer';
                                ^  case sensitive!
Could extend the condition using AND, OR, NOT etc.
Dot notation is often needed:
sqlite> SELECT Name, Amount FROM Employee, Salary
   ...> WHERE  Employee.Grade = Salary.Grade  } and SQL
   ...> AND    Salary.Amount > '50000';       } "join"*
* https://www.guru99.com/sqlite-join.html
** the SQL documentation for SELECT: http://www.sqlite.org/lang_select.html
SELECT columns FROM tables WHERE expression ORDER BY columns;
Can have any number of columns not necessarily just one:
Note: WHERE clause (if used) must precede ORDER BY clause.

Changing Data
=============
UPDATE tablename SET column = value WHERE condition;

DELETE FROM Tablename WHERE condition
So if we wanted to delete Anne Jones from our Employee table we could do this:
sqlite> DELETE FROM Employee WHERE Name = 'Anne Jones';
Also can use DROP command (to delete a whole table.

Linking Data Across Tables
==========================
Data Constraints: applied when we define (CREATE) the database structure.
The most common constraints are:
    NOT NULL
    PRIMARY KEY [AUTOINCREMENT]
    UNIQUE (often used for non INTEGER type PRIMARY KEY columns)
    DEFAULT value
Note that the AUTOINCREMENT "keyword" is not actually used,
rather it is implied from a type/constraint combination of
INTEGER PRIMARY KEY. A quirk of the SQLite documentation
that trips up! http://www.sqlite.org/faq.html
Table Constraints: not discussed in any detail.
Column Type Constraints:
    TEXT
    INTEGER
    REAL
    NUMERIC
    BLOB
    NULL 
The modified SQL (using constraints) looks like this:
sqlite> CREATE TABLE Employee (
   ...> EmpID INTEGER pRIMARY kEY,
   ...> Name NOT NULL,
   ...> HireDate NOT NULL,
   ...> Grade NOT NULL,
   ...> ManagerID INTEGER
   ...> );
sqlite> CREATE TABLE Salary (
   ...> SalaryID INTEGER PRIMARY KEY,
   ...> Grade  UNIQUE,
   ...> Amount INTEGER DEFAULT 10000
   ...> );


